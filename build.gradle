plugins {
    id 'java'
    id 'maven-publish'
    id "net.serenity-bdd.serenity-gradle-plugin" version "3.5.0"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

ext {
    serenityCoreVersion = '3.4.2'
    logbackVersion = '1.2.10'
    junitVersion = '5.8.2'
    assertJVersion = '3.23.1'
    lombokVersion = '1.18.20'
}

dependencies {
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation 'org.aeonbits.owner:owner-java8:1.0.9'
    implementation group: 'net.serenity-bdd', name: 'serenity-reports', version: '3.4.2'
    implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.1'
    testImplementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}"
    testImplementation "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}"
    testImplementation "org.junit.platform:junit-platform-launcher:1.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
}

group = 'net.serenitybdd.starter'
version = '1.0.0-SNAPSHOT'
description = 'Sample Serenity BDD project using Cucumber'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
